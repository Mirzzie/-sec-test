name: CI-Security-Pipeline-Recreation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: "mirzzie/juiceshop"
  TAG: ${{ github.sha }}

jobs:
  snyk_scan:
    name: Run Snyk SAST/SCA
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Snyk CLI
        run: |
          curl -sL https://static.snyk.io/cli/latest/snyk-linux > snyk
          chmod +x snyk
          sudo mv snyk /usr/local/bin/
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
      - name: Run Snyk test
        run: snyk test --all-projects --json --out=snyk-report.json || true
      - name: Send Snyk results to Dashboard
        run: snyk monitor --all-projects --org=${{ secrets.SNYK_ORG }} || true
      - name: Upload Snyk report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json

  sbom_and_build:
    name: SBOM, SCA and Build
    runs-on: ubuntu-latest
    needs: snyk_scan
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          echo "$PWD/bin" >> $GITHUB_PATH
      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:${{ env.TAG }} .
      - name: Run Trivy filesystem scan (SBOM + SCA)
        run: trivy fs --format json --output trivy-fs-report.json .
      - name: Scan Docker image with Trivy
        run: trivy image --format json --output trivy-image-report.json $IMAGE_NAME:${{ env.TAG }} || true
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Tag & Push Docker image
        run: |
          docker tag $IMAGE_NAME:${{ env.TAG }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ env.TAG }}
          docker push $IMAGE_NAME:latest
      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-fs-report.json
            trivy-image-report.json

  stackhawk_dast:
    name: Deploy to staging & run StackHawk DAST
    runs-on: ubuntu-latest
    needs: sbom_and_build
    steps:
      - uses: actions/checkout@v4
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Deploy image to staging EC2 (via SSH)
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} \
          "docker pull ${{ env.IMAGE_NAME }}:${{ env.TAG }} && \
           docker rm -f juiceshop || true && \
           docker run -d --name juiceshop -p 3000:3000 --restart unless-stopped ${{ env.IMAGE_NAME }}:${{ env.TAG }}"
      - name: Wait for staging to be ready
        run: |
          for i in {1..20}; do
            if curl -s http://${{ secrets.STAGING_SSH_HOST }}:3000/ | grep -q "OWASP Juice Shop"; then
              echo "Juice Shop ready"
              exit 0
            fi
            echo "Waiting..."
            sleep 6
          done
          echo "Staging not responding"; exit 1
      - name: Install StackHawk CLI
        run: |
          curl -sL https://raw.githubusercontent.com/StackHawk/stackhawk-cli/main/install-stackhawk.sh | bash
      - name: Run StackHawk DAST Scan
        env:
          STACKHAWK_API_KEY: ${{ secrets.STACKHAWK_API_KEY }}
        run: |
          hawk app-test -c stackhawk.yml -b http://${{ secrets.STAGING_SSH_HOST }}:3000 --ci --output-json stackhawk-report.json || true
      - name: Upload StackHawk report
        uses: actions/upload-artifact@v4
        with:
          name: stackhawk-report
          path: stackhawk-report.json
