name: CI-Security-Pipeline-Recreation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: "mirzzie/dvwa"
  TAG: ${{ github.sha }}

jobs:
  sast:
    name: Run SAST (Snyk)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Snyk
        run: npm install -g snyk
      - name: Run Snyk SAST scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --all-projects --json > snyk-report.json || true
      - name: Upload Snyk report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json

  sbom_and_build:
    name: SBOM, SCA and Build
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          echo "$PWD/bin" >> $GITHUB_PATH
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:${{ env.TAG }} .
      - name: Run Trivy filesystem scan (SBOM + SCA)
        run: trivy fs --format json --output trivy-fs-report.json .
      - name: Scan Docker image with Trivy
        run: trivy image --format json --output trivy-image-report.json $IMAGE_NAME:${{ env.TAG }} || true
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Tag & Push Docker image
        run: |
          docker tag $IMAGE_NAME:${{ env.TAG }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ env.TAG }}
          docker push $IMAGE_NAME:latest
      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-fs-report.json
            trivy-image-report.json

  deploy_and_dast:
    name: Deploy to staging & run DAST (StackHawk)
    runs-on: ubuntu-latest
    needs: sbom_and_build
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy DVWA + MySQL on staging EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} << 'EOF'
            set -e

            export IMAGE_NAME=${IMAGE_NAME}
            export TAG=${TAG}
            export MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            export MYSQL_DATABASE=${MYSQL_DATABASE}
            export MYSQL_USER=${MYSQL_USER}
            export MYSQL_PASSWORD=${MYSQL_PASSWORD}
            export MYSQL_PORT=${MYSQL_PORT}

            echo "[*] Cleaning up old containers..."
            docker rm -f dvwa || true
            docker rm -f dvwa-db || true

            echo "[*] Cleaning up dangling images..."
            docker image prune -f

            echo "[*] Ensuring Docker network..."
            docker network create dvwa-net || true

            echo "[*] Starting MySQL..."
            docker run -d --name dvwa-db \
              --network dvwa-net \
              -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
              -e MYSQL_DATABASE=$MYSQL_DATABASE \
              -e MYSQL_USER=$MYSQL_USER \
              -e MYSQL_PASSWORD=$MYSQL_PASSWORD \
              mysql:5.7

            echo "[*] Starting DVWA..."
            docker run -d --name dvwa \
              --network dvwa-net \
              -p 4280:80 \
              -e DB_SERVER=dvwa-db \
              -e DB_DATABASE=$MYSQL_DATABASE \
              -e DB_USER=$MYSQL_USER \
              -e DB_PASSWORD=$MYSQL_PASSWORD \
              -e DB_PORT=$MYSQL_PORT \
              $IMAGE_NAME:$TAG

            echo "[*] Deployment complete."
            docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          EOF
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAG: ${{ env.TAG }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}

      - name: Run StackHawk DAST scan
        uses: stackhawk/hawkscan-action@v2
        with:
          apiKey: ${{ secrets.STACKHAWK_API_KEY }}
        env:
          APP_HOST: "http://${{ secrets.STAGING_SSH_HOST }}:4280"
          APP_ID: ${{ secrets.STACKHAWK_APP_ID }}
          APP_ENV: "staging"

      - name: Upload StackHawk report
        uses: actions/upload-artifact@v4
        with:
          name: stackhawk-report
          path: stackhawk-report.json
